https://medium.com/@pw33392/discover-unusual-patterns-in-time-series-data-with-unsupervised-anomaly-detection-and-isolation-78db408caaed

https://medium.com/@ketan31kumar/mastering-anomaly-detection-in-time-series-data-techniques-and-insights-98fbe94c4258

https://www.youtube.com/watch?v=qy41dXGbAxY&ab_channel=DataSciencewithMarco


from sklearn.ensemble import IsolationForest

model = IsolationForest(contamination=0.01, random_state=42)
df['anomaly_score'] = model.fit_predict(sensor_data)

df['is_anomaly'] = df['anomaly_score'] == -1

from sklearn.cluster import DBSCAN

dbscan = DBSCAN(eps=0.5, min_samples=10)
df['cluster'] = dbscan.fit_predict(sensor_data)

# Flag anomalies as points in cluster -1
df['is_anomaly'] = df['cluster'] == -1


from sklearn.neighbors import LocalOutlierFactor

lof = LocalOutlierFactor(n_neighbors=20, contamination=0.01)
df['is_anomaly'] = lof.fit_predict(sensor_data) == -1


from sklearn.svm import OneClassSVM

model = OneClassSVM(kernel='rbf', gamma=0.1, nu=0.05)
df['is_anomaly'] = model.fit_predict(sensor_data) == -1


import matplotlib.pyplot as plt

plt.figure(figsize=(15, 5))
plt.plot(df.index, df['sensor_1'], label='Sensor 1')
plt.scatter(df.index[df['is_anomaly']], df['sensor_1'][df['is_anomaly']], color='red', label='Anomaly')
plt.legend()
plt.show()



from keras.models import Sequential
from keras.layers import Dense

# Define the Autoencoder model
model = Sequential([
    Dense(64, activation='relu', input_dim=sensor_data.shape[1]),
    Dense(32, activation='relu'),
    Dense(64, activation='relu'),
    Dense(sensor_data.shape[1], activation='linear')
])

model.compile(optimizer='adam', loss='mse')
model.fit(sensor_data, sensor_data, epochs=50, batch_size=32)

# Compute reconstruction error
reconstructions = model.predict(sensor_data)
mse = np.mean(np.power(sensor_data - reconstructions, 2), axis=1)
threshold = np.percentile(mse, 95)  # Set threshold for anomalies
df['is_anomaly'] = mse > threshold

